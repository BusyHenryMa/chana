/*
 * Definition of JPQL literal tokens.
 * 
 * @author Caoyuan Deng
 */
module Literal;

import Character;
import Identifier;
import Spacing;
import Keyword;


Number LiteralNumeric =
  LiteralFloat
/ LiteralDouble
/ LiteralLong
/ LiteralInteger
;

// ----- Integer literals

transient String integer =
  [0-9]+
;

Integer LiteralInteger = 
  v:integer { yyValue = Integer.parseInt(v, 10); }
;

Long LiteralLong = 
  v:integer void:[lL] { yyValue = Long.parseLong(v, 10); }
;

// ----- Decimal literals

transient String decimal =
  [0-9]* '.' [0-9]+ exponent?
/ [0-9]+ '.'        exponent?
/ [0-9]+            exponent
;

transient String exponent = 
  [eE] [+\-]? [0-9]+
;

Float LiteralFloat = 
  v:decimal void:[fF] { yyValue = Float.parseFloat(v); }
;

Double LiteralDouble = 
  v:decimal void:[dD] { yyValue = Double.parseDouble(v); }
;

// ----- Character and String Literals

String LiteralCharacter = 
  ['] characterChar ['] 
;

String LiteralString = 
  LiteralDoubleQuotedString
/ LiteralSingleQuotedString
;

String LiteralDoubleQuotedString = 
  void:["] v:literalDoubleQuotedString void:["]  { yyValue = v; }
;

String literalDoubleQuotedString = 
 stringChar*
;

String LiteralSingleQuotedString = 
  void:['] v:literalSingleQuotedString void:['] { yyValue = v; }
;

String literalSingleQuotedString = 
( "''" / characterChar )*
;

// ----- Date Time literal

java.time.temporal.Temporal LiteralTemporal =
  LiteralDate
/ LiteralTime
/ LiteralTimestamp
;

String date = 
  [0-9][0-9][0-9][0-9] '-' [0-9][0-9] '-' [0-9][0-9]
;

String time = 
  [0-9][0-9] ':' [0-9][0-9] ':' [0-9][0-9]
;

String mills = 
  '.' [0-9]*
;

java.time.LocalDate LiteralDate = 
  void:"{d'" v:date void:"'}" { yyValue = java.time.LocalDate.parse(v); }
;

java.time.LocalTime LiteralTime = 
  void:"{t'" v:time void:"'}" { yyValue = java.time.LocalTime.parse(v); } 
;

java.time.LocalDateTime LiteralTimestamp =
  void:"{ts'" v1:date w+ v2:time v3:mills? void:"'}" { yyValue = java.time.LocalDateTime.parse(v1 + "T" + v2 + v3); }
;

// ----- Boolean literal
Boolean LiteralBoolean =
  TRUE  { yyValue = true; }
/ FALSE { yyValue = false; }
;