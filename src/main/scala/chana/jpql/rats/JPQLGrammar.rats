/*
 * Definition of JPQL grammar.
 * 
 * @author Caoyuan Deng
 */
module chana.jpql.rats.JPQLGrammar;

import Character;
import Identifier;
import Keyword;
import Literal;
import Separator;
import Spacing;
import State;

option withLocation;


// ----- public entrance
public generic JPQL = 
  SelectStatement EOF
/ UpdateStatement EOF
/ DeleteStatement EOF
;

generic SelectStatement = 
  SelectClause FromClause WhereClause? GroupbyClause? HavingClause? OrderbyClause?
;

generic UpdateStatement =
  UpdateClause SetClause WhereClause?
;

generic UpdateClause =
  UPDATE EntityName ( AS? Ident )? 
;

generic SetClause =
  SET SetAssignClause ( COMMA SetAssignClause )*
;

generic SetAssignClause =
  SetAssignTarget EQ NewValue
;

generic SetAssignTarget =
  PathExpr
/ Attribute
;

generic NewValue =
  ScalarExpr
/ NULL
;

generic DeleteStatement =
  DeleteClause WhereClause?
;

generic DeleteClause =
  DELETE FROM EntityName ( AS? Ident )?
;

generic SelectClause = 
  SELECT DISTINCT? SelectItem (COMMA SelectItem )* 
; 

generic SelectItem = 
  SelectExpr ( AS? Ident )?
;

generic SelectExpr = 
  AggregateExpr
/ ScalarExpr
/ OBJECT LParen VarAccessOrTypeConstant RParen
/ ConstructorExpr
/ MapEntryExpr
;

generic MapEntryExpr =
  ENTRY LParen VarAccessOrTypeConstant RParen
;

generic PathExprOrVarAccess =
  QualIdentVar ( DOT Attribute )*
;

generic QualIdentVar =
  VarAccessOrTypeConstant
/ KEY   LParen VarAccessOrTypeConstant RParen
/ VALUE LParen VarAccessOrTypeConstant RParen 
;

generic AggregateExpr = 
  AVG   LParen DISTINCT? ScalarExpr RParen
/ MAX   LParen DISTINCT? ScalarExpr RParen
/ MIN   LParen DISTINCT? ScalarExpr RParen
/ SUM   LParen DISTINCT? ScalarExpr RParen
/ COUNT LParen DISTINCT? ScalarExpr RParen
;

generic ConstructorExpr =
  NEW ConstructorName LParen ConstructorItem ( COMMA ConstructorItem )* RParen
;

generic ConstructorName =
  Ident ( DOT Ident )*
;

generic ConstructorItem =
  ScalarExpr
/ AggregateExpr
;

generic FromClause =
  FROM IdentVarDecl ( COMMA ( IdentVarDecl / CollectionMemberDecl) )*
;

generic IdentVarDecl =
  RangeVarDecl Join*
;

generic RangeVarDecl = 
  EntityName AS? Ident
;

generic EntityName =
  Identifier
;

// support join fetch with alias name
generic Join = 
  JoinSpec              JoinAssocPathExpr                   AS? Ident  JoinCond?
/ JoinSpec TREAT LParen JoinAssocPathExpr AS  Ident  RParen AS? Ident  JoinCond?
/ JoinSpec FETCH        JoinAssocPathExpr                       Ident? JoinCond?
;

generic JoinSpec = 
  JOIN
/ LEFT JOIN
/ LEFT OUTER JOIN
/ INNER JOIN
;

generic JoinCond =
  ON CondExpr
;

generic CollectionMemberDecl =
  IN LParen CollectionValuedPathExpr RParen AS? Ident
;

generic CollectionValuedPathExpr = 
  PathExpr
;

generic AssocPathExpr =
  PathExpr
;

generic JoinAssocPathExpr = 
  QualIdentVar ( DOT Attribute )*
;

generic SingleValuedPathExpr = 
  PathExpr
;

generic StateFieldPathExpr = 
  PathExpr 
;

generic PathExpr =
  QualIdentVar ( DOT Attribute )+
;

generic Attribute =
  AttributeName
;

generic VarAccessOrTypeConstant =
  Ident
;

generic WhereClause =
  WHERE CondExpr 
;

generic CondExpr =
  CondTerm ( OR CondTerm )*
;

generic CondTerm =
  CondFactor ( AND CondFactor )*
;

generic CondFactor =
  NOT? ( CondPrimary / ExistsExpr )
;

generic CondPrimary =
  LParen CondExpr RParen
/ SimpleCondExpr
;

generic SimpleCondExpr =
  ArithExpr          SimpleCondExprRem
/ NonArithScalarExpr SimpleCondExprRem
;

generic SimpleCondExprRem =
  ComparisonExpr
/ NOT? CondWithNotExpr 
/ IS NOT? IsExpr
;

generic CondWithNotExpr =
  BetweenExpr
/ LikeExpr
/ InExpr
/ CollectionMemberExpr
;

generic IsExpr =
  NullComparisonExpr
/ EmptyCollectionComparisonExpr
; 

generic BetweenExpr =
  BETWEEN ScalarOrSubSelectExpr AND ScalarOrSubSelectExpr
;

generic InExpr =
  IN InputParam
/ IN LParen ScalarOrSubSelectExpr ( COMMA ScalarOrSubSelectExpr )* RParen
/ IN LParen Subquery                                               RParen
;

generic LikeExpr =
  LIKE ScalarOrSubSelectExpr Escape?
;

generic Escape =
  ESCAPE ScalarExpr
;

generic NullComparisonExpr =
  NULL 
;

generic EmptyCollectionComparisonExpr =
  EMPTY 
;

generic CollectionMemberExpr =
  MEMBER OF? CollectionValuedPathExpr
;

generic ExistsExpr =
  EXISTS LParen Subquery RParen 
;

generic ComparisonExpr =
  EQ ComparisonExprRightOperand
/ NE ComparisonExprRightOperand
/ GT ComparisonExprRightOperand
/ GE ComparisonExprRightOperand
/ LT ComparisonExprRightOperand
/ LE ComparisonExprRightOperand
;

generic ComparsionExprRightOperand =
  ArithExpr
/ NonArithScalarExpr
/ AnyOrAllExpr
;

generic ComparisonExprRightOperand =
  ArithExpr
/ NonArithScalarExpr
/ AnyOrAllExpr
;

generic ArithExpr = 
  SimpleArithExpr
/ LParen Subquery RParen
;

generic SimpleArithExpr =
  ArithTerm ( PLUS  ArithTerm @PlusArithTerm 
            / MINUS ArithTerm @MinusArithTerm 
            )* 
;  

generic ArithTerm = 
  ArithFactor ( MULTIPLY ArithFactor @MultiplyArithFactor
              / DIVIDE   ArithFactor @DivideArithFactor
              )* 
;

generic ArithFactor = 
  PLUS  ArithPrimary @PlusArithPrimary
/ MINUS ArithPrimary @MinusArithPrimay
/ ArithPrimary
;

generic ArithPrimary =
  PathExprOrVarAccess
/ InputParam
/ CaseExpr
/ FuncsReturningNumerics
/ LParen SimpleArithExpr RParen
/ LiteralNumeric 
;

generic ScalarExpr = 
  SimpleArithExpr
/ NonArithScalarExpr
;

generic ScalarOrSubSelectExpr =
  ArithExpr
/ NonArithScalarExpr
;

generic NonArithScalarExpr =
  FuncsReturningDatetime
/ FuncsReturningStrings
/ LiteralString
/ LiteralBoolean
/ LiteralTemporal
/ EntityTypeExpr
;

generic AnyOrAllExpr =
  ALL  LParen Subquery RParen
/ ANY  LParen Subquery RParen
/ SOME LParen Subquery RParen
;

generic EntityTypeExpr =
  TypeDiscriminator
;

generic TypeDiscriminator = 
  TYPE LParen VarOrSingleValuedPath RParen
/ TYPE LParen InputParam            RParen
;

generic CaseExpr =
  SimpleCaseExpr
/ GeneralCaseExpr
/ CoalesceExpr
/ NullifExpr
;

generic SimpleCaseExpr =
  CASE CaseOperand SimpleWhenClause SimpleWhenClause* ELSE ScalarExpr END
;

generic GeneralCaseExpr =
  CASE WhenClause WhenClause* ELSE ScalarExpr END
;

generic CoalesceExpr =
  COALESCE LParen ScalarExpr ( COMMA ScalarExpr )+ RParen
;

generic NullifExpr =
  NULLIF LParen ScalarExpr COMMA ScalarExpr RParen
;

generic CaseOperand =
  StateFieldPathExpr
/ TypeDiscriminator
;

generic WhenClause =
  WHEN CondExpr THEN ScalarExpr
;

generic SimpleWhenClause =
  WHEN ScalarExpr THEN ScalarExpr
;

generic VarOrSingleValuedPath =
  SingleValuedPathExpr
/ VarAccessOrTypeConstant
;

generic StringPrimary =
  LiteralString 
/ FuncsReturningStrings
/ InputParam
/ StateFieldPathExpr 
;

generic Literal =
  LiteralNumeric
/ LiteralBoolean
/ LiteralString
;

generic LiteralTemporal =
  LiteralDate
/ LiteralTime
/ LiteralTimestamp
;

generic InputParam =
  ':' identifier    @NamedInputParam
/ '?' [1-9] [0-9]*  @PositionInputParam
;

generic FuncsReturningNumerics =
  Abs
/ Length 
/ Mod
/ Locate
/ Size
/ Sqrt
/ Index
/ Func
;

generic FuncsReturningDatetime = 
  CURRENT_DATE
/ CURRENT_TIME
/ CURRENT_TIMESTAMP
;

generic FuncsReturningStrings = 
  Concat
/ Substring
/ Trim
/ Upper
/ Lower
;

// --- Functions returning string

generic Concat =
  CONCAT LParen ScalarExpr (COMMA ScalarExpr)+ RParen
;

generic Substring =
  SUBSTRING LParen ScalarExpr COMMA ScalarExpr ( COMMA ScalarExpr )? RParen
;

generic Trim =
  TRIM LParen TrimSpec? TrimChar? FROM? StringPrimary RParen
;

generic TrimSpec = 
  LEADING 
/ TRAILING
/ BOTH
;

generic TrimChar =
  LiteralSingleQuotedString
/ InputParam
;

generic Upper =
  UPPER LParen ScalarExpr RParen
;

generic Lower =
  LOWER LParen ScalarExpr RParen
;

// --- Functions returning numeric

generic Abs =
  ABS LParen SimpleArithExpr RParen
;

generic Length =
  LENGTH LParen ScalarExpr RParen
;

generic Locate =
  LOCATE LParen ScalarExpr COMMA ScalarExpr ( COMMA ScalarExpr )? RParen
;

generic Size =
  SIZE LParen CollectionValuedPathExpr RParen
;

generic Mod =
  MOD LParen ScalarExpr COMMA ScalarExpr RParen
;

generic Sqrt =
  SQRT LParen ScalarExpr RParen
;

generic Index =
  INDEX LParen VarAccessOrTypeConstant RParen
;

generic Func =
  FUNCTION LParen LiteralSingleQuotedString ( COMMA NewValue )* RParen
;

generic Subquery =
  SimpleSelectClause SubqueryFromClause WhereClause? GroupbyClause? HavingClause?
;

generic SimpleSelectClause =
  SELECT DISTINCT? SimpleSelectExpr
;

generic SimpleSelectExpr = 
  SingleValuedPathExpr 
/ AggregateExpr
/ VarAccessOrTypeConstant
;

generic SubqueryFromClause =
  FROM SubselectIdentVarDecl ( COMMA ( SubselectIdentVarDecl 
                                     / CollectionMemberDecl
                                     ) 
                             )*
;

generic SubselectIdentVarDecl =
  IdentVarDecl
/ AssocPathExpr AS? Ident
/ CollectionMemberDecl
;

generic OrderbyClause =
  ORDER BY OrderbyItem ( COMMA OrderbyItem )*
;

// support SimpleArithExpr as order by item
generic OrderbyItem =
  ( SimpleArithExpr / ScalarExpr ) ( ASC / DESC )?
;

generic GroupbyClause =
  GROUP BY ScalarExpr ( COMMA ScalarExpr )* 
;

generic HavingClause =
  HAVING CondExpr 
;

generic Ident =
  Identifier
;

