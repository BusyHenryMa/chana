/*
 * Definition of JPQL keyword tokens.
 * 
 * @author Caoyuan Deng
 */
module Keyword;

import Character;
import Identifier;
import Spacing;

body {
  static {
    add(JPQL_RESERVED, new String[] {
      "ABS",
      "ALL",
      "AND",
      "ANY",
      "AS",
      "ASC",
      "AVG",
      "BETWEEN",
      "BIT_LENGTH",
      "BOTH",
      "BY",
      "CASE",
      "CHAR_LENGTH",
      "CHARACTER_LENGTH",
      "CLASS",
      "COALESCE",
      "CONCAT",
      "COUNT",
      "CURRENT_DATE",
      "CURRENT_TIME",
      "CURRENT_TIMESTAMP",
      "DELETE",
      "DESC",
      "DISTINCT",
      "ELSE",
      "EMPTY",
      "ENTRY",
      "ESCAPE",
      "EXISTS",
      "FALSE",
      "FETCH",
      "FROM",
      "FUNCTION",
      "GROUP",
      "HAVING",
      "IN",
      "INDEX",
      "INNER",
      "IS",
      "JOIN",
      "KEY",
      "LEADING",
      "LEFT",
      "LENGTH",
      "LIKE",
      "LOCATE",
      "LOWER",
      "MAX",
      "MEMBER",
      "MIN",
      "MOD",
      "NEW",
      "NOT",
      "NULL",
      "NULLIF",
      "OBJECT",
      "OF",
      "ON",
      "OR",
      "ORDER",
      "OUTER",
      "POSITION",
      "SELECT",
      "SET",
      "SIZE",
      "SOME",
      "SQRT",
      "SUBSTRING",
      "SUM",
      "THEN",
      "TAILING",
      "TREAT",
      "TRIM",
      "TRUE",
      "TYPE",
      "UNKNOWN",
      "UPDATE",
      "UPPER",
      "VALUE",
      "WHEN",
      "WHERE"
    });
  }
}

option setOfString(JPQL_RESERVED);

// ----- reserved identifiers
ignoringCase void   ABS               = "abs"               :Word ;
ignoringCase String ALL               = "all"               :Word ;
ignoringCase void   AND               = "and"               :Word ;
ignoringCase String ANY               = "any"               :Word ;
ignoringCase void   AS                = "as"                :Word ;
ignoringCase String ASC               = "asc"               :Word ;
ignoringCase String AVG               = "avg"               :Word ;
ignoringCase void   BETWEEN           = "between"           :Word ;
ignoringCase String BIT_LENGTH        = "bit_length"        :Word ;
ignoringCase String BOTH              = "both"              :Word ;
ignoringCase void   BY                = "by"                :Word ;
ignoringCase void   CASE              = "case"              :Word ;
ignoringCase String CHARACTER_LENGTH  = "character_length"  :Word ;
ignoringCase String CHAR_LENGTH       = "char_length"       :Word ;
ignoringCase void   COALESCE          = "coalesce"          :Word ;
ignoringCase void   CONCAT            = "concat"            :Word ;
ignoringCase String COUNT             = "count"             :Word ;
ignoringCase String CURRENT_TIME      = "current_time"      :Word ;
ignoringCase String CURRENT_DATE      = "current_date"      :Word ;
ignoringCase String CURRENT_TIMESTAMP = "current_timestamp" :Word ;
ignoringCase void   DELETE            = "delete"            :Word ;
ignoringCase String DESC              = "desc"              :Word ;
ignoringCase String DISTINCT          = "distinct"          :Word ;
ignoringCase void   ELSE              = "else"              :Word ;
ignoringCase void   END               = "end"               :Word ;
ignoringCase void   ENTRY             = "entry"             :Word ;
ignoringCase void   EMPTY             = "empty"             :Word ;
ignoringCase void   ESCAPE            = "escape"            :Word ;
ignoringCase void   EXISTS            = "exists"            :Word ;
ignoringCase void   FALSE             = "false"             :Word ;
ignoringCase String FETCH             = "fetch"             :Word ;
ignoringCase void   FROM              = "from"              :Word ;
ignoringCase void   FUNCTION          = "function"          :Word ;
ignoringCase void   GROUP             = "group"             :Word ;
ignoringCase void   HAVING            = "having"            :Word ;
ignoringCase void   IN                = "in"                :Word ;
ignoringCase void   INDEX             = "index"             :Word ;
ignoringCase String INNER             = "inner"             :Word ;
ignoringCase void   IS                = "is"                :Word ;
ignoringCase String JOIN              = "join"              :Word ;
ignoringCase String KEY               = "key"               :Word ;
ignoringCase String LEADING           = "leading"           :Word ;
ignoringCase String LEFT              = "left"              :Word ;
ignoringCase void   LENGTH            = "length"            :Word ;
ignoringCase void   LIKE              = "like"              :Word ;
ignoringCase void   LOCATE            = "locate"            :Word ;
ignoringCase void   LOWER             = "lower"             :Word ;
ignoringCase String MAX               = "max"               :Word ;
ignoringCase void   MEMBER            = "member"            :Word ;
ignoringCase String MIN               = "min"               :Word ;
ignoringCase void   MOD               = "mod"               :Word ;
ignoringCase void   NEW               = "new"               :Word ;
ignoringCase String NOT               = "not"               :Word ;
ignoringCase void   NULL              = "null"              :Word ;
ignoringCase void   NULLIF            = "nullif"            :Word ;
ignoringCase String OBJECT            = "object"            :Word ;
ignoringCase void   OF                = "of"                :Word ;
ignoringCase void   ON                = "on"                :Word ; 
ignoringCase void   OR                = "or"                :Word ;
ignoringCase void   ORDER             = "order"             :Word ;
ignoringCase String OUTER             = "outer"             :Word ;
ignoringCase String POSITION          = "position"          :Word ;
ignoringCase void   SELECT            = "select"            :Word ;
ignoringCase void   SET               = "set"               :Word ;
ignoringCase void   SIZE              = "size"              :Word ;
ignoringCase String SOME              = "some"              :Word ;
ignoringCase void   SQRT              = "sqrt"              :Word ;
ignoringCase void   SUBSTRING         = "substring"         :Word ;
ignoringCase String SUM               = "sum"               :Word ;
ignoringCase String TRAILING          = "trailing"          :Word ;
ignoringCase void   THEN              = "then"              :Word ;
ignoringCase String TREAT             = "treat"             :Word ;
ignoringCase void   TRIM              = "trim"              :Word ;
ignoringCase void   TRUE              = "true"              :Word ;
ignoringCase void   TYPE              = "type"              :Word ;
ignoringCase void   UPDATE            = "update"            :Word ;
ignoringCase String UNKNOWN           = "unknown"           :Word ;
ignoringCase void   UPPER             = "upper"             :Word ;
ignoringCase String VALUE             = "value"             :Word ;
ignoringCase void   WHEN              = "when"              :Word ;
ignoringCase void   WHERE             = "where"             :Word ;


String Word               = SKIP_N wordChars SKIP_N ;
transient String wordChars = [a-zA-Z_]+ ;

String EQ       = SKIP_N "="  SKIP_N ;
String NE       = SKIP_N "<>" SKIP_N ;
String GT       = SKIP_N ">"  SKIP_N ;
String GE       = SKIP_N ">=" SKIP_N ;
String LT       = SKIP_N "<"  SKIP_N ;
String LE       = SKIP_N "<=" SKIP_N ;
void   PLUS     = SKIP_N "+"  SKIP_N ;
void   MINUS    = SKIP_N "-"  SKIP_N ;
void   MULTIPLY = SKIP_N "*"  SKIP_N ;
void   DIVIDE   = SKIP_N "/"  SKIP_N ;

