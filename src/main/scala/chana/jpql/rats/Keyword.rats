/*
 * Definition of JPQL keyword tokens.
 * 
 * @author Caoyuan Deng
 */
module Keyword;

import Character;
import Identifier;
import Spacing;

body {
  static {
    add(JPQL_KEYWORDS, new String[] {
      "ALL",
      "AND",
      "ANY",
      "AS",
      "ASC",
      "AVG",
      "BETWEEN",
      "BIT_LENGTH",
      "BY",
      "CHARACTER_LENGTH",
      "CHAR_LENGTH",
      "COUNT",
      "CURRENT_TIME",
      "CURRENT_DATE",
      "CURRENT_TIMESTAMP",
      "DELETE",
      "DESC",
      "DISTINCT",
      "EMPTY",
      "EXISTS",
      "FALSE",
      "FETCH",
      "FROM",
      "GROUP",
      "HAVING",
      "IN",
      "INNER",
      "IS",
      "JOIN",
      "LEFT",
      "LIKE",
      "LOWER",
      "MAX",
      "MEMBER",
      "MIN",
      "MOD",
      "NEW",
      "NOT",
      "NULL",
      "OBJECT",
      "OF",
      "OR",
      "ORDER",
      "OUTER",
      "POSITION",
      "SELECT",
      "SOME",
      "SUM",
      "TRIM",
      "TRUE",
      "UPDATE",
      "UNKNOWN",
      "UPPER",
      "WHERE"
    });
  }
}

option setOfString(JPQL_KEYWORDS);

// ----- Keywords

ignoringCase generic Keyword =
  "all"               :Word @All
/ "and"               :Word @And
/ "any"               :Word @Any
/ "as"                :Word @As
/ "asc"               :Word @Asc
/ "avg"               :Word @Avg
/ "between"           :Word @Between
/ "bit_length"        :Word @BitLength
/ "by"                :Word @By
/ "character_length"  :Word @CharacterLength
/ "char_length"       :Word @CharLength
/ "count"             :Word @Count
/ "current_time"      :Word @CurrentTime
/ "current_date"      :Word @CurrentDate
/ "current_timestamp" :Word @CurrentTimestamp
/ "delete"            :Word @Delete
/ "desc"              :Word @Desc
/ "distinct"          :Word @Distinct
/ "empty"             :Word @Empty
/ "exists"            :Word @Exists
/ "false"             :Word @False
/ "fetch"             :Word @Fetch
/ "from"              :Word @From
/ "group"             :Word @Group
/ "having"            :Word @Having
/ "in"                :Word @In
/ "inner"             :Word @Inner
/ "is"                :Word @Is
/ "join"              :Word @Join
/ "left"              :Word @Left
/ "like"              :Word @Like
/ "lower"             :Word @Lower
/ "max"               :Word @Max
/ "member"            :Word @Member
/ "min"               :Word @Min
/ "mod"               :Word @Mod
/ "new"               :Word @New
/ "not"               :Word @Not
/ "null"              :Word @Null
/ "object"            :Word @Object
/ "of"                :Word @Of
/ "or"                :Word @Or
/ "order"             :Word @Order
/ "outer"             :Word @Outer
/ "position"          :Word @Position
/ "select"            :Word @Select
/ "some"              :Word @Some
/ "sum"               :Word @Sum
/ "trim"              :Word @Trim
/ "true"              :Word @True
/ "update"            :Word @update
/ "unknown"           :Word @Unkown
/ "upper"             :Word @Upper
/ "where"             :Word @Where
;

