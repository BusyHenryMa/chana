akka {
  loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
    transport-failure-detector {
      heartbeat-interval = 4 s   # default 4s
      acceptable-heartbeat-pause = 10 s  # default 10s
    }
  }

  cluster {
    auto-down-unreachable-after = off
    metrics.enabled = off
    failure-detector {
      acceptable-heartbeat-pause = 6 s # default 3 s
      threshold = 12.0    # default 8.0
    }
    scheduler {
      # make it less than system's tick-duration to force start a new one
      tick-duration = 9 ms # default 33ms
      ticks-per-wheel = 512 # default 512
    }
    use-dispatcher = cluster-dispatcher
  }

  cluster.pub-sub.gossip-interval = 3s  # default 1s
}

cluster-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-max = 4
  }
}

akka.actor {
  serializers {
    avro = "chana.serializer.AvroSerializer"
    avro-projection = "chana.serializer.AvroProjectionSerializer"
    binlog = "chana.serializer.BinlogSerializer"
    java-map = "chana.serializer.JavaMapSerializer"
    schema = "chana.serializer.SchemaSerializer"
    schema-event= "chana.serializer.SchemaEventSerializer"
    update-event = "chana.serializer.UpdateEventSerializer"
    writemessages = "akka.persistence.serialization.WriteMessagesSerializer"
  }
                                         
  serialization-bindings {
    "akka.persistence.journal.AsyncWriteTarget$WriteMessages" = writemessages
    "chana.avro.Binlog" = binlog
    "chana.avro.UpdateEvent" = update-event
    "chana.jpql.AvroProjection" = avro-projection
    "chana.package$PutSchema" = schema-event
    "org.apache.avro.generic.GenericContainer" = avro
    "org.apache.avro.Schema" = schema
  }
}

# //#schema-board-ext-config
# Settings for the DistributedSchemaBoardExtension
chana.schema-board {
  # Actor name of the schema board actor, /user/distributedSchemaBoard
  name = distributedSchemaBoard

  # Start the mediator on members tagged with this role.
  # All members are used if undefined or empty.
  role = ""
}
# //#schema-board-ext-config

# //#script-borad-ext-config
# Settings for the DistributedScriptBoardExtension
chana.script-board {
  # Actor name of the script board actor, /user/distributedScriptBoard
  name = distributedScriptBoard

  # Start the mediator on members tagged with this role.
  # All members are used if undefined or empty.
  role = ""
}
# //##script-borad-ext-config

# //#jpql-borad-ext-config
# Settings for the DistributedJPQLBoardExtension
chana.jpql-board {
  # Actor name of the JPQL board actor, /user/distributedJPQLBoard
  name = distributedJPQLBoard

  # Start the mediator on members tagged with this role.
  # All members are used if undefined or empty.
  role = ""
}
# //##jpql-borad-ext-config

chana.persistence {
  persistent = off
  nrOfEventsBetweenSnapshots = 200
}

akka.extensions = [
  "akka.cluster.client.ClusterClientReceptionist",
  "chana.schema.DistributedSchemaBoard",
  "chana.script.DistributedScriptBoard",
  "chana.jpql.DistributedJPQLBoard"
]

akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/journal"
akka.persistence.journal.leveldb.native = off

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/snapshots"

# Must set in application.conf. And if we set here, it will be transitive to dependencies.
# akka.cluster.roles = ["chana-entity, chana-jpql"]
# akka.cluster.sharding.role = "chana-entity"

chana.web {
  interface = "127.0.0.1"
  port = 8080
}

chana.reactor {
  publisher.routing-logic = "round-robin"
}
